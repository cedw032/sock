{"version":3,"sources":["hooks/useSocket.js","hooks/useMessenger.js","components/PeerDisplay.js","utils/debounce.js","App.js","index.js"],"names":["socket","io","connect","useSocket","listeners","useMemo","Object","entries","forEach","_ref","_ref2","slicedToArray","name","listener","on","useMessenger","id","peerId","_useState","useState","_useState2","log","setLog","addToLog","message","concat","toConsumableArray","objectSpread","at","moment","from","content","toISOString","emit","type","to","payload","PeerDisplay","self","peer","_useMessenger","_useMessenger2","sendMessage","input","setInput","getMessageClassname","cx","react_default","a","createElement","className","username","map","format","getUsername","value","onChange","e","target","onKeyDown","key","timeouts","debounce","method","period","currentTimeout","clearTimeout","setTimeout","undefined","App","setId","_useState3","_useState4","peers","setPeers","_useState5","_useState6","setUsername","thisPeer","find","otherPeers","filter","components_PeerDisplay","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.feb6f462.chunk.js","sourcesContent":["import {useMemo} from 'react';\nimport io from 'socket.io-client';\n\n//const socket = io.connect('http://localhost:5000');\nconst socket = io.connect();\n\nconst useSocket = listeners => useMemo(() => {\t\n\tObject.entries(listeners).forEach(([name, listener]) => {\n\t\tsocket.on(name, listener);\n\t});\n\treturn socket;\n});\n\nexport default useSocket;","import {useState} from 'react';\nimport moment from 'moment';\nimport useSocket from './useSocket';\n\nconst useMessenger = (id, peerId) => {\n\n\tconst [log, setLog] = useState([]);\n\n\tconst addToLog = message => setLog([\n\t\t...log, \n\t\t{\n\t\t\t...message,\n\t\t\tat: moment(message.at)\n\t\t}\n\t]);\n\n\tconst socket = useSocket({\n\t\tmessage: message => message.from === peerId && addToLog(message),\n\t});\n\n\tconst sendMessage = content => {\n\t\t\n\t\tconst message = {\n\t\t\tfrom: id,\n\t\t\tcontent,\n\t\t\tat: moment().toISOString(),\n\t\t}\n\n\t\taddToLog(message);\n\t\tsocket.emit('dispatch', {\n\t\t\ttype: 'message',\n\t\t\tto: [peerId],\n\t\t\tpayload: message,\n\t\t})\n\t};\n\n\treturn [log, sendMessage]\n};\n\nexport default useMessenger;","import React, {useState} from 'react';\nimport cx from 'classnames';\nimport useMessenger from '../hooks/useMessenger';\n\nconst PeerDisplay = ({self, peer}) => {\n\n\tconst [log, sendMessage] = useMessenger(self.id, peer.id);\n\n\tconst [input, setInput] = useState('');\n\n\tconst getMessageClassname = message => cx(\n\t\t'message',\n\t\tmessage.from === self.id && 'self',\n\t\tmessage.from === peer.id && 'peer',\n\t);\n\n\tconst getUsername = message => message.from === self.id\n\t\t? self.username\n\t\t: peer.username;\n\n\treturn (\n\t\t<div className='panel'>\n\t\t\t<div>\n\t\t\tusername: {peer.username}\n\t\t\t</div>\n\t\t\t<div className='panel message-box'>\n\t\t\t\t{log.map(message => \n\t\t\t\t\t<div className={getMessageClassname(message)}>\n\t\t\t\t\t\t<span>{message.at.format('h:mma')} - </span>\n\t\t\t\t\t\t<span>{getUsername(message)}: </span>\n\t\t\t\t\t\t<span>{message.content}</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<input \n\t\t\t\t\tvalue={input} \n\t\t\t\t\tonChange={e => setInput(e.target.value)}\n\t\t\t\t\tonKeyDown={e => {\n\t\t\t\t\t\tif (e.key === 'Enter') {\n\t\t\t\t\t\t\tsendMessage(input);\n\t\t\t\t\t\t\tsetInput('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}}/>\n\t\t\t</div>\n\t\t</div>\n\n\t\t\n\t);\n}\n\nexport default PeerDisplay;","\nlet timeouts = {};\n\nconst debounce = (key, method, period) => {\n\n\tconst currentTimeout = timeouts[key];\n\n\tif (currentTimeout) clearTimeout(currentTimeout); \n\n\ttimeouts[key] = setTimeout(() => {\n\t\tmethod();\n\t\ttimeouts[key] = undefined;\n\t}, period);\n}\n\nexport default debounce;","import React, {useState} from 'react';\n\nimport useSocket from './hooks/useSocket';\nimport PeerDisplay from './components/PeerDisplay'\n\nimport './App.css';\n\nimport debounce from './utils/debounce';\n\nfunction App() {\n\n\tconst [id, setId] = useState(-1);\n\tconst [peers, setPeers] = useState([]);\n\tconst [username, setUsername] = useState('');\n\n\tconst socket = useSocket({\n\t\tid: setId,\n\t\tpeers: setPeers,\n\t});\n\n\tconst onUsernameChange = ({target: {value}}) => {\n\t\tsetUsername(value);\n\t\tdebounce(\n\t\t\t'emit username', \n\t\t\t() => socket.emit('username', value), \n\t\t\t1000\n\t\t);\n\t}\n\n\tconst thisPeer = peers.find(peer => peer.id === id);\n\tconst otherPeers = peers.filter(peer => peer.id !== id);\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t<div className='panel'>\n\t\t\t\tusername: \n\t\t\t\t<input \n\t\t\t\t\tvalue={username}\n\t\t\t\t\tonChange={onUsernameChange}/>\n\t\t\t</div>\n\t\t\t{otherPeers.map(peer => \n\t\t\t\t<PeerDisplay\n\t\t\t\t\tkey={peer.id}\n\t\t\t\t\tself={thisPeer}\n\t\t\t\t\tpeer={peer}/>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}